3,1), ncol=2, byrow=TRUE)) + c(9)
plot(g0)
matrix(c(1,2,
2,1,
3,2,
3,1), ncol=2)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
G1 = graph_from_literal(1-2-3-4-2, 3-1, directed = FALSE)
plot(G1)
G1 = graph_from_literal(1-2-3-4-2, 3-1)
plot(G1)
G1 = graph_from_literal(1-2-3-4-2, 3-1, 5, 3-6, 3-7, 3-8, 3-9, 3-10)
plot(G1)
E(G1)
edge_attr(G1, "weight") = c(20, 10, 33, 99.8, 19, 100, 4, 4, 1, 0.8)
plot(G1, edge.label = E(G1)$weight)
library(igraph)
G1 = graph_from_literal(1-2-3-4-2, 3-1, 5, 3-6, 3-7, 3-8, 3-9, 3-10)
plot(G1)
E(G1)
edge_attr(G1, "weight") = c(20, 10, 33, 99.8, 19, 100, 4, 4, 1, 0.8)
plot(G1, edge.label = E(G1)$weight)
G2 = graph_from_literal(1-3, 2-4, 5-6, 5-7, 5-8)
plot(G2)
V(G2)
vertex_attr(G2, "names") = c("A", "B", "C", "D", "E", "F", "G", "H")
plot(G2, vertex.label = V(G2)$names)
plot(G2, vertex.label = V(G2)$names, layout = round)
G3 = graph_from_edgelist(c(1:20))
G3 = graph_from_literal(c(1:20))
G3 = graph_from_literal(1:20)
plot(G3)
plot(G3, layout = circle)
plot(G3, layout = "circle")
plot(G3, layout = layout.circle)
plot(G3, layout = layout.grid)
V(G3)
G3 = graph_from_literal(c(1:20))
G3 = graph_from_literal(1:20)
V(G3)
G3 = graph_from_literal(seq(1,20))
V(G3)
G3 = graph_from_literal(seq(1,20))
G3 = graph_from_literal(range(1,20))
range(1, 20)
G3 = graph_from_literal(1:20)
V(G3)
G3 = graph()
G3 = graph(edges = NULL)
V(G3) = 1:20
G3 = graph(edges = NULL, vertices = 1:20)
G3 = make_empty_graph(n = 20)
plot(G3, layout = layout.grid)
plot(G3, layout = layout.circle)
plot(G3, layout = layout.sphere())
plot(G3, layout = layout.sphere)
plot(G3, layout = layout.circle)
G4 = make_full_graph(n = 20)
plot(G4)
plot(G3, layout)
plot(G2, vertex.label = V(G2)$names)
plot(G3)
G5 = make_tree(n = 20)
plot(G5)
G5 = make_tree(n = 20, children = 3)
plot(G5)
G5 = make_tree(n = 20, children = 4)
plot(G5)
G5 = make_tree(n = 20, children = 3, mode = "indirected")
plot(G5)
G5 = make_tree(n = 20, children = 3, mode = indirected)
plot(G5)
G5 = make_tree(n = 20, children = 3, mode = indirected)
plot(G5)
G5 = make_tree(n = 20, children = 3, mode = "undirected")
G5 = make_tree(n = 20, children = 3, mode = "undirected")
plot(G5)
G5 = make_tree(n = 20, children = 3, mode = "undirected")
G5 = make_tree(n = 20, children = 3, mode = "undirected")
G5 = make_tree(n = 20, children = 3, mode = "undirected")
G5 = make_tree(n = 20, children = 3, mode = "undirected")
plot(G5)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
G1 = graph_from_literal(1-2-3-4-2, 3-1, 5, 3-6, 3-7, 3-8, 3-9, 3-10)
plot(G1)
E(G1)
edge_attr(G1, "weight") = c(20, 10, 33, 99.8, 19, 100, 4, 4, 1, 0.8)
plot(G1, edge.label = E(G1)$weight)
G2 = graph_from_literal(1-3, 2-4, 5-6, 5-7, 5-8)
plot(G2)
V(G2)
vertex_attr(G2, "names") = c("A", "B", "C", "D", "E", "F", "G", "H")
plot(G2, vertex.label = V(G2)$names)
G3 = make_empty_graph(n = 20)
plot(G3)
G4 = make_full_graph(n = 20)
plot(G4)
G5 = make_tree(n = 20, children = 3, mode = "undirected")
plot(G5)
degree(G1)
max(degree(G1))
g1maks = V(G1)[degree(V(G1) = max(degree(G1))]
g1maks = V(G1)[degree(V(G1) == max(degree(G1))]
degree(V(G1) == max(degree(G1))
V(G1)$names[degree(G1) == max(degree(G1))
V(G1)$names[degree(G1) == max(degree(G1))]
V(G1)[degree(G1) == max(degree(G1))]
V(G1)[degree(G1) == max(degree(G1))]
degree(G1)
MS = matrix(c( 0,2,1,2,0,0,0,0,0,0,0,
2,0,0,0,0,0,5,1,0,0,0,
1,0,0,0,0,6,0,4,0,0,0,
2,0,0,0,3,0,4,0,0,0,0,
0,0,0,3,0,1,0,1,0,0,0,
0,0,6,0,1,0,3,0,2,1,0,
0,5,0,4,0,3,0,0,0,2,0,
0,1,4,0,1,0,0,0,3,3,0,
0,0,0,0,0,2,0,3,0,0,2,
0,0,0,0,0,1,2,3,0,0,5,
0,0,0,0,0,0,0,0,2,5,0),
nrow = 11, ncol = 11, byrow = TRUE,
dimnames = list(c("a", "b","c","d","e","f","g","h","i","j","k"),
c("a", "b","c","d","e","f","g","h","i","j","k")))
plot(MS)
G6 = graph_from_adjacency_matrix(MS)
plot(G6)
G6 = graph_from_biadjacency_matrix(MS)
plot(G6)
G6 = graph_from_adjacency_matrix(MS)
plot(G6)
V(G6)
E(G6)
plot(G6)
G6 = graph_from_adjacency_matrix(MS, mode = "undirected", weighted = TRUE, add.colnames = "nazwa")
plot(G6)
G6 = graph_from_adjacency_matrix(MS, mode = "undirected", weighted = TRUE, add.colnames = "name")
plot(G6)
dfs(G6, 1)
dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
plot(dfs6)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
dfs6
tree6 = graph_from_edgelist(dfs6$order)
dfs6
tree6 = graph_from_edgelist(dfs6$father)
dfs6
tree6 = graph_from_literal(dfs6$father)
tree6 = graph_from_graphnel(dfs6$father)
tree6 = graph_from_graphnel(dfs6)
tree6 = graph_from_edgelist(dfs)
dfsmod6 = cbind(2:length(dfs6$father), father)
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
dfsmod6 = cbind(2:length(dfs6$father), father6)
tree6 = graph_from_edgelist(dfsmod6)
plot(tree6)
plot(tree6, directed = FALSE)
plot(tree6)
father6
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
plot(tree6)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
plot(tree6)
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE, edge_attr(color = "black"))
plot(tree6, edge_attr(color = "black"))
plot(tree6)
E(tree6)$color = "black"
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
father6
dfsmod6 = cbind(2:length(dfs6$father), father6)
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
E(tree6)$color = "black"
plot(tree6)
E(tree6)$color = "red"
plot(tree6)
E(tree6)$color = "black"
plot(tree6, vertex.label = V(G6)$name)
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G1, vertex.label = V(G1)$name, layout = layout_in_circle)
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G1, vertex.label = V(G1)$name, layout = layout_in_circle)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
dfs6
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
father6
dfsmod6 = cbind(2:length(dfs6$father), father6)
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
E(tree6)$color = "black"
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
dfs6
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
father6
dfsmod6 = cbind(2:length(dfs6$father), father6)
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
G1 = graph_from_literal(1-2-3-4-2, 3-1, 5, 3-6, 3-7, 3-8, 3-9, 3-10)
plot(G1)
E(G1)
edge_attr(G1, "weight") = c(20, 10, 33, 99.8, 19, 100, 4, 4, 1, 0.8)
plot(G1, edge.label = E(G1)$weight)
G2 = graph_from_literal(1-3, 2-4, 5-6, 5-7, 5-8)
plot(G2)
V(G2)
vertex_attr(G2, "names") = c("A", "B", "C", "D", "E", "F", "G", "H")
plot(G2, vertex.label = V(G2)$names)
G3 = make_empty_graph(n = 20)
plot(G3)
G4 = make_full_graph(n = 20)
plot(G4)
G5 = make_tree(n = 20, children = 3, mode = "undirected")
plot(G5)
V(G1)[degree(G1) == max(degree(G1))]
MS = matrix(c( 0,2,1,2,0,0,0,0,0,0,0,
2,0,0,0,0,0,5,1,0,0,0,
1,0,0,0,0,6,0,4,0,0,0,
2,0,0,0,3,0,4,0,0,0,0,
0,0,0,3,0,1,0,1,0,0,0,
0,0,6,0,1,0,3,0,2,1,0,
0,5,0,4,0,3,0,0,0,2,0,
0,1,4,0,1,0,0,0,3,3,0,
0,0,0,0,0,2,0,3,0,0,2,
0,0,0,0,0,1,2,3,0,0,5,
0,0,0,0,0,0,0,0,2,5,0),
nrow = 11, ncol = 11, byrow = TRUE,
dimnames = list(c("a", "b","c","d","e","f","g","h","i","j","k"),
c("a", "b","c","d","e","f","g","h","i","j","k")))
G6 = graph_from_adjacency_matrix(MS, mode = "undirected", weighted = TRUE, add.colnames = "name")
plot(G6)
V(G6)
E(G6)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
dfs6
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
father6
dfsmod6 = cbind(2:length(dfs6$father), father6)
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.grid())
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.grid)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_as_star)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_as_star)
plot(tree6, vertex.label = V(G6)$name, layout = layout_as_star, centr_degree = TRUE)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_as_star, centr_degree = TRUE)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_as_star, centr_degree = TRUE)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.circle, centr_degree = TRUE)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.circle, centr_degree = TRUE)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid(), centr_degree = TRUE)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid, centr_degree = TRUE)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.grid, centr_degree = TRUE)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.grid)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
G1 = graph_from_literal(1-2-3-4-2, 3-1, 5, 3-6, 3-7, 3-8, 3-9, 3-10)
plot(G1)
E(G1)
edge_attr(G1, "weight") = c(20, 10, 33, 99.8, 19, 100, 4, 4, 1, 0.8)
plot(G1, edge.label = E(G1)$weight)
G2 = graph_from_literal(1-3, 2-4, 5-6, 5-7, 5-8)
plot(G2)
V(G2)
vertex_attr(G2, "names") = c("A", "B", "C", "D", "E", "F", "G", "H")
plot(G2, vertex.label = V(G2)$names)
G3 = make_empty_graph(n = 20)
plot(G3)
G4 = make_full_graph(n = 20)
plot(G4)
G5 = make_tree(n = 20, children = 3, mode = "undirected")
plot(G5)
V(G1)[degree(G1) == max(degree(G1))]
MS = matrix(c( 0,2,1,2,0,0,0,0,0,0,0,
2,0,0,0,0,0,5,1,0,0,0,
1,0,0,0,0,6,0,4,0,0,0,
2,0,0,0,3,0,4,0,0,0,0,
0,0,0,3,0,1,0,1,0,0,0,
0,0,6,0,1,0,3,0,2,1,0,
0,5,0,4,0,3,0,0,0,2,0,
0,1,4,0,1,0,0,0,3,3,0,
0,0,0,0,0,2,0,3,0,0,2,
0,0,0,0,0,1,2,3,0,0,5,
0,0,0,0,0,0,0,0,2,5,0),
nrow = 11, ncol = 11, byrow = TRUE,
dimnames = list(c("a", "b","c","d","e","f","g","h","i","j","k"),
c("a", "b","c","d","e","f","g","h","i","j","k")))
G6 = graph_from_adjacency_matrix(MS, mode = "undirected", weighted = TRUE, add.colnames = "name")
plot(G6)
V(G6)
E(G6)
dfs6 = dfs(G6, 1, father = TRUE, dist = TRUE)
dfs6$father
dfs6$order
dfs6
father6 = as.matrix(dfs6$father[2:length(dfs6$father)])
father6
dfsmod6 = cbind(2:length(dfs6$father), father6)
dfsmod6
tree6 = graph_from_edgelist(dfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout_in_circle)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout_in_circle)
bfs6 = bfs(G6, 1, father = TRUE, dist = TRUE)
bfs6$father
bfs6$order
bfs6
father6 = as.matrix(bfs6$father[2:length(bfs6$father)])
father6
bfsmod6 = cbind(2:length(bfs6$father), father6)
bfsmod6
tree6 = graph_from_edgelist(bfsmod6, directed = FALSE)
E(tree6)$color = "red"
E(tree6)$width = 4
plot(tree6, vertex.label = V(G6)$name, layout = layout.grid)
par(new = T)
plot(G6, vertex.label = V(G6)$name, layout = layout.grid)
setwd("~/repositories/mpiwd")
load("~/repositories/mpiwd/.RData")
load("~/repositories/mpiwd/.RData")
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
split_data = do.call(rbind, strsplit(df$connection, " - "))
split_data = do.call(rbind, strsplit(df$connection, " - "))
```
split_data
df$start = split_data[,1]
df$end = split_data[,2]
df = df[-df$connection, ]
df = df[-"connection", ]
df = df[, -"connection"]
df = df[, -c("connection")]
df = df[, -5]
