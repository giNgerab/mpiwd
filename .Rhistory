sum(test$is_late)
any(!test$is_late)
any(test$is_late)
any(predicted_bool)
predicted_bool
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain+temperature+humidity+pressure+wind, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.3, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted_bool
test[, colnames(test)!="is_late"]
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain+temperature+humidity+pressure+wind, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.3, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted
any(predicted>0.3)
any(predicted>0.1)
any(predicted>0.2)
predicted[predicted>0.1]
length(predicted[predicted>0.1])
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain+temperature+humidity+pressure+wind, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain+temperature+humidity+pressure+wind, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.2, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
summary(model)
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.2, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.7, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
train = df[sample, ]
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
test = df[sample, ]
rm(sample)
model = glm(is_late~is_rain, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.7, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
any(predicted>0.7)
any(predicted>0.2)
any(predicted>0.1)
length(df$is_late[df$is_late])
length(df$is_late[!df$is_late])
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
library(DT)
rm(list = ls())
df = read.csv('delays.csv')
sum(is.na(df))
df = df[,!(colnames(df) == "arrival" | colnames(df) == "date")]
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$delay = as.numeric(gsub(" min", "", df$delay))
df = df %>%
group_by(datetime) %>%
arrange(delay)%>% #dodatkowo też sortujemy względem opóźnienia
slice(seq(1, n(), by = 20)) %>% #i wybieramy każdą dwudziestą obserwację
ungroup()
split_data = do.call(rbind, strsplit(df$connection, " - ")) #tworzymy tymczasową zmienną
df$start = split_data[,1]
df$end = split_data[,2]
rm(split_data)
df = df[, colnames(df)!="connection"]
df$start = as.factor(df$start)
df$end = as.factor(df$end)
df$id = as.factor(df$id)
df$carrier = as.factor(df$carrier)
df$name = as.factor(df$name)
weather = read.csv("weather.csv")
datatable(weather)
colnames(weather) = c("time", "temperature", "humidity", "rain", "pressure", "wind_speed")
weather = weather[c(-1, -2), ]
sum(is.na(weather))
weather$time = strptime(weather$time, format = '%Y-%m-%d T %H:%M')
weather$temperature = as.numeric(weather$temperature)
weather$humidity = as.numeric(weather$humidity)
weather$rain = as.numeric(weather$rain)
weather$pressure = as.numeric(weather$pressure)
weather$wind = as.numeric(weather$wind)
df = fuzzyjoin::difference_left_join(
df, weather,
by = c("datetime" = "time"),
max_dist = as.difftime(30, units = "mins") #definiujemy maksymalnie dopuszczalną różnicę w czasie
)%>%
# group_by(datetime) %>%
# filter(abs(difftime(datetime, datetime, units = "secs")) == min(abs(difftime(datetime, datetime, units = "secs")))) %>%
# ungroup() %>%
select(-time)     #usuwamy powtarzającą się kolumnę
rm(weather)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
df$is_late = ifelse(df$delay > 1, TRUE, FALSE)
write.csv(df, file = "data.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
rm(list = ls())
df = read.csv("data.csv")
df
library(tidyverse)
library(chron)
library(corrplot)
library(ggridges)
library(plotly)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = log(n()), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
bar_plot = ggplot(delay_summary, aes(x = carrier, y = count, fill = delay_factor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Train Delays by Carrier",
#x = "Carrier",
y = "Log(Percentage of delay type)",
fill = "Delay Factor"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(face = "bold"),
legend.position = "right"
)
interactive_plot = ggplotly(bar_plot)
interactive_plot = interactive_plot %>%
layout(
xaxis = list(tickangle = 45)
)
interactive_plot
library(ggcorrplot)
corr = cor(select_if(df, is.numeric)[,-1])
ggcorrplot(corr,
method = "circle",
type = "upper",
ggtheme = theme_classic,
legend.title = "",
colors = c("darkblue", "white", "darkred"),
outline.color = "darkgrey")
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
train = df[sample, ]
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.5,0.5))
test = df[sample, ]
rm(sample)
model = glm(is_late~is_rain, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.7, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted_bool = ifelse(predicted>0.5, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted
scale(predicted)
predicted = scale(predicted)
predicted_bool = ifelse(predicted>0, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
predicted_bool = ifelse(predicted>1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
summary(predicted)
predicted_bool = ifelse(predicted>mean(predicted), TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted = scale(predicted)
predicted_bool = ifelse(predicted>mean(predicted), TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
pscl::pR2(model)["McFadden"]
library(caret)
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late~is_rain+temperature+humidity+pressure, family="binomial", data=train)
summary(model)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted = scale(predicted)
predicted_bool = ifelse(predicted>mean(predicted), TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
pscl::pR2(model)["McFadden"]
pscl::pR2(model)["McFadden"]
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
model = glm(is_late~is_rain, family="binomial", data=train)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
pscl::pR2(model)["McFadden"]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
chisq.test(df)
chisq.test(df[,is.factor(df)])
is.factor(df)
chisq.test(df[,sapply(df, is.factor())])
chisq.test(df[,sapply(df, is.factor])
chisq.test(df[,sapply(df, is.factor)])
df[,sapply(df, is.factor)]
View(df)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
rm(list = ls())
df = read.csv("data.csv")
df
library(tidyverse)
library(chron)
library(corrplot)
library(ggridges)
library(plotly)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = log(n()), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
bar_plot = ggplot(delay_summary, aes(x = carrier, y = count, fill = delay_factor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Train Delays by Carrier",
#x = "Carrier",
y = "Log(Percentage of delay type)",
fill = "Delay Factor"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(face = "bold"),
legend.position = "right"
)
interactive_plot = ggplotly(bar_plot)
interactive_plot = interactive_plot %>%
layout(
xaxis = list(tickangle = 45)
)
interactive_plot
library(ggcorrplot)
corr = cor(select_if(df, is.numeric)[,-1])
ggcorrplot(corr,
method = "circle",
type = "upper",
ggtheme = theme_classic,
legend.title = "",
colors = c("darkblue", "white", "darkred"),
outline.color = "darkgrey")
df[,sapply(df, is.factor)]
chisq.test()
View(df)
df[,sapply(df, is.factor)]
df[,sapply(df, is.factor)]
sapply(df, is.factor)
View(df)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
write.dcf (df, file = "data")
write.dcf(df, file = "data")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
library(DT)
rm(list = ls())
df = read.csv('delays.csv')
sum(is.na(df))
df = df[,!(colnames(df) == "arrival" | colnames(df) == "date")]
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$delay = as.numeric(gsub(" min", "", df$delay))
df = df %>%
group_by(datetime) %>%
arrange(delay)%>%
slice(seq(1, n(), by = 20)) %>%
df = df %>%
group_by(datetime) %>%
arrange(delay)%>%
slice(seq(1, n(), by = 20))
View(df)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = FALSE, message = FALSE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
library(DT)
rm(list = ls())
df = read.csv('delays.csv')
sum(is.na(df))
df = df[,!(colnames(df) == "arrival" | colnames(df) == "date")]
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$delay = as.numeric(gsub(" min", "", df$delay))
df = df %>%
group_by(datetime) %>%
arrange(delay)%>%
slice(seq(1, n(), by = 20))
split_data = do.call(rbind, strsplit(df$connection, " - "))
df$start = split_data[,1]
df$end = split_data[,2]
rm(split_data)
df = df[, colnames(df)!="connection"]
df$start = as.factor(df$start)
df$end = as.factor(df$end)
df$id = as.factor(df$id)
df$carrier = as.factor(df$carrier)
df$name = as.factor(df$name)
weather = read.csv("weather.csv")
datatable(weather)
colnames(weather) = c("time", "temperature", "humidity", "rain", "pressure", "wind_speed")
weather = weather[c(-1, -2), ]
sum(is.na(weather))
weather$time = strptime(weather$time, format = '%Y-%m-%d T %H:%M')
weather$temperature = as.numeric(weather$temperature)
weather$humidity = as.numeric(weather$humidity)
weather$rain = as.numeric(weather$rain)
weather$pressure = as.numeric(weather$pressure)
weather$wind = as.numeric(weather$wind)
df = fuzzyjoin::difference_left_join(
df, weather,
by = c("datetime" = "time"),
max_dist = as.difftime(30, units = "mins")
)%>%
select(-time)
rm(weather)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
df$is_late = ifelse(df$delay > 1, TRUE, FALSE)
write.dcf(df, file = "data")
write.csv(df, file = "data.csv")
source("~/repositories/mpiwd/dm.R", echo=TRUE)
source("~/repositories/mpiwd/dm.R", echo=TRUE)
source("~/repositories/mpiwd/dm.R", echo=TRUE)
source("~/repositories/mpiwd/dm.R", echo=TRUE)
source("~/repositories/mpiwd/dm.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, error = FALSE)
df = read.csv("data.csv")
df = df[, -colnames(df)=="X"]
df = df[, !colnames(df)=="X"]
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
typeof(df)
typeof(df[])
typeof(df[,])
source("~/repositories/mpiwd/dm.R", echo=TRUE)
source("~/repositories/mpiwd/dm.R", echo=TRUE)
df = read.csv("data.csv")
View(df)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, error = FALSE)
rm(list = ls())
df = read.csv("data.csv")
datatable(df)
sum(is.na(df))
library(tidyverse)
library(chron)
library(corrplot)
library(fuzzyjoin)
library(DT)
rm(list = ls())
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
summary(df)
summary(df)
df
df = read.csv("data.csv")
df
summary(df)
type_sum(df)
lapply(df, summary)
lapply(df, typeof)
sum(is.na(df))
df = df[, !colnames(df)=="X"]
df = factor(df[, lapply(df, is.character)])
df = factor(df[, sapply(df, is.character)])
df = as_factor(df[, sapply(df, is.character)])
df = as.factor(df[, sapply(df, is.character)])
df = as.factor(df[, lapply(df, is.character)])
lapply(df, is.character)
df[sapply(df, is.character)] = lapply(df[sapply(df, is.character)], as.factor)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
df$is_late = ifelse(df$delay > 1, TRUE, FALSE)
unique(df$start)
unique(df$end)
library(ggridges)
library(plotly)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = log(n()), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
bar_plot = ggplot(delay_summary, aes(x = carrier, y = count, fill = delay_factor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Train Delays by Carrier",
#x = "Carrier",
y = "Log(Percentage of delay type)",
fill = "Delay Factor"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(face = "bold"),
legend.position = "right"
)
interactive_plot = ggplotly(bar_plot)
interactive_plot = interactive_plot %>%
layout(
xaxis = list(tickangle = 45)
)
interactive_plot
library(ggcorrplot)
corr = cor(select_if(df, is.numeric)[,-1])
ggcorrplot(corr,
method = "circle",
type = "upper",
ggtheme = theme_classic,
legend.title = "",
colors = c("darkblue", "white", "darkred"),
outline.color = "darkgrey")
df[sapply(df, is.factor)]
install.packages("ltm")
library(ltm)
biserial.cor(df)
biserial.cor(df$rain, df$delay_factor)
biserial.cor(df$rain, df$is_late)
chisq.test(df)
chisq.test(df[sapply(df, is.factor)])
df$is_rain = ifelse(df$rain!=0, TRUE, FALSE)
table(df$is_late, df$is_rain)
table = table(df$is_late, df$is_rain)
table
table = table(df$is_late, df$is_rain, df$carrier)
table
table = table(df$is_late, df$carrier)
table
table
