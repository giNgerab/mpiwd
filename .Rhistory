model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, error = FALSE)
rm(list = ls())
library(tidyverse)
library(chron)
library(corrplot)
library(fuzzyjoin)
library(DT)
df = read.csv("data.csv")
# datatable(df)
datatable(head(df, n = 40))
df = df[, !colnames(df)=="X"]
df[sapply(df, is.character)] = lapply(df[sapply(df, is.character)], as.factor)
library(ggcorrplot)
corr = cor(select_if(df, is.numeric)[,-1])
ggcorrplot(corr,
method = "circle",
type = "upper",
ggtheme = theme_classic,
legend.title = "",
colors = c("purple", "white", "darkgreen"),
outline.color = "black")
library(caret)
df$is_late = ifelse(df$rain>=20, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
ggplot(df)+
geom_point(aes(y = delay, x = rain), colour = "darkorange")+
xlab("Deszcz (mm)")+
ylab("Opóźnienie (min)")+
theme_minimal()
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
ggplot(df) +
geom_boxplot(aes(is_rain, log(delay), fill = is_rain)) +
theme_minimal() +
xlab("Pada")+
ylab("Opóźnienie [log (min)]")+
theme(
axis.title = element_text(face = "bold"),
legend.position = "none"
)
library(plotly)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = n(), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
ggplot(delay_summary, aes(y = carrier, x = count, fill = delay_factor)) +
geom_bar(stat = "identity") +
labs(
title = "Odsetek opóźnień różnych stopni",
fill = ""
) +
xlab("") +
ylab("") +
theme_minimal(base_size = 15) +
guides(fill = guide_legend(nrow = 2))+
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.text = element_text(size = 10, face = "bold"),
legend.byrow = TRUE,
legend.margin = margin(t = 0, b = 0, r = 0, l = 0)
)
df$day = as.POSIXlt(df$datetime)$mday
avg_by_day_carr = df%>%
group_by(day, carrier) %>%
summarise(avg = mean(delay))
avg_by_day_carr %>%
ggplot(aes(x = factor(day), fill = carrier, y = avg)) +
geom_bar(position = 'dodge', stat = "identity") +
theme_minimal() +
ylab("Średnie opóźnienie (min)") +
xlab("Dzień maja 2022")+
guides(fill = guide_legend(ncol = 1))+
ggtitle("Rozkład opóźnień u przewoźników każdego dnia")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "right", legend.text = element_text(size = 6), legend.title = element_blank(), legend.key.width = unit(0.5, "line"), legend.margin = margin())
ggplot(df)+
geom_violin(aes(x = carrier, y = log(delay), fill = carrier))+
xlab("")+
ylab("Czas opóźnienia (min)") +
ggtitle("Rozkład opóźnień")+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "right", legend.text = element_text(size = 8), legend.title = element_blank(), legend.key.height = unit(1, "line"), legend.key.width = unit(0.3, "line"), legend.margin = margin(), axis.text.x = element_blank()) +
geom_hline(aes(yintercept = log(mean(delay))), colour = "red")
most_freq_del = df %>%
group_by(id) %>%
summarise(Delayed = sum(delay>10), carrier = carrier[1], Relacja = paste0(as.character(start[1]), " - ", as.character(end[1]))) %>%
arrange(desc(Delayed))%>%
slice(1:20)
plot_naj = ggplot(most_freq_del, aes(y = reorder(id, -sort(Delayed)), x = Delayed, fill = Delayed, label = Relacja))+
geom_bar(stat = "identity")+
xlab("")+
ylab("")+
ggtitle("Relacje z największą liczbą opóźnionych kursów")+
theme_minimal()+
scale_fill_gradient(low = "lightpink", high = "purple")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"), legend.position = "none", legend.text = element_text(size = 7.5, face = "bold"), legend.title = element_blank(), legend.key.height = unit(1, "line"), legend.key.width = unit(0.3, "line"), legend.margin = margin(), legend.byrow = TRUE)
ggplotly(plot_naj, tooltip = c("label", "fill"))
stations = list(
c("Siedlce", "Mazowieckie"),
c("Wejherowo", "Pomorskie"),
c("Warszawa Wschodnia", "Mazowieckie"),
c("Gdańsk Śródmieście", "Pomorskie"),
c("Kraków Główny", "Małopolskie"),
c("Świnoujście", "Zachodniopomorskie"),
c("Kołobrzeg", "Zachodniopomorskie"),
c("Gdańsk Zaspa", "Pomorskie"),
c("Przemyśl Główny", "Podkarpackie"),
c("Gdynia Główna", "Pomorskie"),
c("Jelenia Góra", "Dolnośląskie"),
c("Bohumin", "Śląskie"),
c("Łódź Fabryczna", "Łódzkie"),
c("Radom Główny", "Mazowieckie"),
c("Gdynia Cisowa", "Pomorskie"),
c("Warszawa Zachodnia", "Mazowieckie"),
c("Gdańsk Główny", "Pomorskie"),
c("Mława", "Mazowieckie"),
c("Dęblin", "Lubelskie"),
c("Warszawa Centralna", "Mazowieckie"),
c("Łuków", "Lubelskie"),
c("Szczecin Główny", "Zachodniopomorskie"),
c("Wrocław Główny", "Dolnośląskie"),
c("Żywiec", "Śląskie"),
c("Działdowo", "Warmińsko-Mazurskie"),
c("Skierniewice", "Łódzkie"),
c("Kłodzko Główne", "Dolnośląskie"),
c("Bydgoszcz Główna", "Kujawsko-Pomorskie"),
c("Wodzisław Śląski", "Śląskie"),
c("Konin", "Wielkopolskie"),
c("Częstochowa", "Śląskie"),
c("Ścinawa", "Dolnośląskie"),
c("Choszczno", "Zachodniopomorskie"),
c("Koło", "Wielkopolskie"),
c("Smętowo", "Pomorskie"),
c("Sędziszów", "Świętokrzyskie"),
c("Pruszków", "Mazowieckie"),
c("Gliwice", "Śląskie"),
c("Otwock", "Mazowieckie"),
c("Kłodzko Miasto", "Dolnośląskie"),
c("Gdynia Chylonia", "Pomorskie"),
c("Włocławek", "Kujawsko-Pomorskie"),
c("Skarżysko-Kamienna", "Świętokrzyskie"),
c("Teresin Niepokalanów", "Mazowieckie"),
c("Tłuszcz", "Mazowieckie"),
c("Przeworsk", "Podkarpackie"),
c("Lębork", "Pomorskie"),
c("Kluczbork", "Opolskie"),
c("Katowice", "Śląskie"),
c("Wyrzysk Osiek", "Wielkopolskie"),
c("Racibórz", "Śląskie"),
c("Opole Główne", "Opolskie"),
c("Rzeszów Główny", "Podkarpackie"),
c("Zwardoń", "Śląskie"),
c("Krzyż", "Wielkopolskie"),
c("Stalowa Wola Południe", "Podkarpackie"),
c("Tychy Lodowisko", "Śląskie"),
c("Elbląg", "Warmińsko-Mazurskie"),
c("Legnica", "Dolnośląskie"),
c("Inowrocław", "Kujawsko-Pomorskie"),
c("Żyrardów", "Mazowieckie"),
c("Sulejówek Miłosna", "Mazowieckie"),
c("Bytom", "Śląskie"),
c("Zgorzelec", "Dolnośląskie"),
c("Sochaczew", "Mazowieckie"),
c("Dębica", "Podkarpackie"),
c("Bielsko-Biała Główna", "Śląskie"),
c("Trzebinia", "Małopolskie"),
c("Sieradz", "Łódzkie"),
c("Łowicz Przedmieście", "Łódzkie"),
c("Nowy Bieruń", "Śląskie"),
c("Malbork", "Pomorskie"),
c("Końskie", "Świętokrzyskie"),
c("Radomsko", "Łódzkie"),
c("Warszawa Zachodnia peron 9", "Mazowieckie"),
c("Kościerzyna", "Pomorskie"),
c("Gniezno", "Wielkopolskie"),
c("Kędzierzyn-Koźle", "Opolskie"),
c("Toruń Główny", "Kujawsko-Pomorskie"),
c("Międzylesie", "Dolnośląskie"),
c("Piła Główna", "Wielkopolskie"),
c("Trzebnica", "Dolnośląskie"),
c("Lublin Główny", "Lubelskie"),
c("Płock", "Mazowieckie"),
c("Chojnice", "Pomorskie"),
c("Krynica-Zdrój", "Małopolskie"),
c("Lubliniec", "Śląskie"),
c("Nowogard", "Zachodniopomorskie"),
c("Kłodawa", "Lubuskie"),
c("Mińsk Mazowiecki", "Mazowieckie"),
c("Łowicz Główny", "Łódzkie"),
c("Wołomin Słoneczna", "Mazowieckie"),
c("Piwniczna", "Małopolskie"),
c("Rawicz", "Wielkopolskie"),
c("Jarocin", "Wielkopolskie"),
c("Leszno", "Wielkopolskie"),
c("Ostrowiec Świętokrzyski", "Świętokrzyskie"),
c("Głogów", "Dolnośląskie"),
c("Łęczyca", "Łódzkie"),
c("Zawiercie", "Śląskie"),
c("Jabłonowo Pomorskie", "Kujawsko-Pomorskie"),
c("Grodzisk Mazowiecki", "Mazowieckie"),
c("Słupsk", "Pomorskie"),
c("Chałupki", "Śląskie"),
c("Zagórz", "Podkarpackie"),
c("Grudziądz", "Kujawsko-Pomorskie"),
c("Gorzów Wielkopolski", "Lubuskie"),
c("Łódź Kaliska", "Łódzkie"),
c("Łazy", "Mazowieckie"),
c("Szczecinek", "Zachodniopomorskie"),
c("Modlin", "Mazowieckie"),
c("Mogilno", "Kujawsko-Pomorskie"),
c("Hel", "Pomorskie"),
c("Radzymin", "Mazowieckie"),
c("Ciechanów", "Mazowieckie"),
c("Zbąszynek", "Lubuskie"),
c("Krotoszyn", "Wielkopolskie"),
c("Białystok", "Podlaskie"),
c("Góra Kalwaria", "Mazowieckie"),
c("Kielce", "Świętokrzyskie"),
c("Drzewica", "Łódzkie"),
c("Warszawa Główna", "Mazowieckie"),
c("Piotrków Trybunalski", "Łódzkie"),
c("Koszalin", "Zachodniopomorskie"),
c("Poznań Główny", "Wielkopolskie"),
c("Reda", "Pomorskie"),
c("Kartuzy", "Pomorskie"),
c("Zgierz", "Łódzkie"),
c("Kozłów", "Małopolskie"),
c("Łódź Widzew", "Łódzkie"),
c("Warka", "Mazowieckie"),
c("Sobolew", "Mazowieckie"),
c("Sierpc", "Mazowieckie"),
c("Lubin", "Dolnośląskie"),
c("Laskowice Pomorskie", "Pomorskie"),
c("Kutno", "Łódzkie"),
c("Kamień Pomorski", "Zachodniopomorskie"),
c("Bielawa Zachodnia", "Dolnośląskie"),
c("Celestynów", "Mazowieckie"),
c("Warszawa Lotnisko Chopina", "Mazowieckie"),
c("Olkusz", "Małopolskie"),
c("Włoszczowa", "Świętokrzyskie"),
c("Wągrowiec", "Wielkopolskie"),
c("Skoczów", "Śląskie"),
c("Kwidzyn", "Pomorskie"),
c("Świnoujście Port", "Zachodniopomorskie"),
c("Mrozy", "Mazowieckie"),
c("Warszawa Gdańska", "Mazowieckie"),
c("Tomaszów Mazowiecki", "Łódzkie"),
c("Olsztyn Główny", "Warmińsko-Mazurskie"),
c("Bohumin Vrbice", "Śląskie"),
c("Zgierz Północ", "Łódzkie"),
c("Muszyna", "Małopolskie"),
c("Wałcz", "Zachodniopomorskie"),
c("Gdańsk Wrzeszcz", "Pomorskie"),
c("Rzepin", "Lubuskie"),
c("Ostrów Wielkopolski", "Wielkopolskie"),
c("Strzelin", "Dolnośląskie"),
c("Terespol", "Lubelskie"),
c("Skawina", "Małopolskie"),
c("Kaliska Kujawskie", "Kujawsko-Pomorskie"),
c("Kalisz", "Wielkopolskie"),
c("Ostrołęka", "Mazowieckie"),
c("Pilawa", "Mazowieckie"),
c("Legionowo Piaski", "Mazowieckie"),
c("Lubań Śląski", "Dolnośląskie"),
c("Nasielsk", "Mazowieckie"),
c("Sławków", "Śląskie"),
c("Loecknitz", "Zachodniopomorskie"),
c("Wieliszew", "Mazowieckie"),
c("Zielona Góra Główna", "Lubuskie"),
c("Grodzisk Wielkopolski", "Wielkopolskie"),
c("Piaseczno", "Mazowieckie"),
c("Goleniów", "Zachodniopomorskie"),
c("Jelcz-Laskowice", "Dolnośląskie"),
c("Warszawa Rembertów", "Mazowieckie"),
c("Wierzchucin", "Kujawsko-Pomorskie"),
c("Suwałki", "Podlaskie"),
c("Tuplice", "Lubuskie"),
c("Siechnice", "Dolnośląskie"),
c("Kępno", "Wielkopolskie"),
c("Kąty Wrocławskie", "Dolnośląskie"),
c("Milicz", "Dolnośląskie"),
c("Pruszcz Gdański", "Pomorskie"),
c("Gdynia Stocznia-Uniwersytet Morski", "Pomorskie"),
c("Ełk", "Warmińsko-Mazurskie"),
c("Frankfurt/Oder", "Lubuskie"),
c("Tantow", "Zachodniopomorskie"),
c("Oleśnica", "Dolnośląskie"),
c("Toruń Wschodni", "Kujawsko-Pomorskie"),
c("Czeremcha", "Lubelskie"),
c("Koluszki", "Łódzkie"),
c("Węgliniec", "Dolnośląskie"),
c("Oświęcim", "Małopolskie"),
c("Dąbrowa Górnicza Ząbkowice", "Śląskie"),
c("Tarnów", "Małopolskie"),
c("Czachówek Południowy", "Mazowieckie"),
c("Polanica-Zdrój", "Dolnośląskie"),
c("Przysucha", "Mazowieckie"),
c("Ustka", "Pomorskie"),
c("Lichkov", "Czechy"),
c("Odolanów", "Wielkopolskie"),
c("Iława Główna", "Warmińsko-Mazurskie"),
c("Chełmża", "Kujawsko-Pomorskie"),
c("Sosnowiec Główny", "Śląskie"),
c("Zebrzydowice", "Śląskie"),
c("Szklarska Poręba Górna", "Dolnośląskie"),
c("Błonie", "Mazowieckie"),
c("Miechów", "Małopolskie"),
c("Nakło nad Notecią", "Kujawsko-Pomorskie"),
c("Rogoźno Wielkopolskie", "Wielkopolskie"),
c("Orzesze", "Śląskie"),
c("Tarnowskie Góry", "Śląskie"),
c("Kudowa-Zdrój", "Dolnośląskie"),
c("Kolbuszowa", "Podkarpackie"),
c("Kostrzyn", "Lubuskie"),
c("Tczew", "Pomorskie"),
c("Września", "Wielkopolskie"),
c("Legionowo", "Mazowieckie"),
c("Chełm", "Lubelskie"),
c("Namysłów", "Opolskie"),
c("Ziębice", "Dolnośląskie"),
c("Kościan", "Wielkopolskie"),
c("Busko-Zdrój", "Świętokrzyskie"),
c("Pabianice", "Łódzkie"),
c("Stargard", "Zachodniopomorskie"),
c("Chojna", "Zachodniopomorskie"),
c("Starczów", "Dolnośląskie"),
c("Luzino", "Pomorskie"),
c("Wołów", "Dolnośląskie"),
c("Medyka", "Podkarpackie"),
c("Kamieniec Ząbkowicki", "Dolnośląskie"),
c("Giżycko", "Warmińsko-Mazurskie"),
c("Gryfino", "Zachodniopomorskie"),
c("Wałbrzych Miasto", "Dolnośląskie"),
c("Pszczyna", "Śląskie"),
c("Brzeg", "Dolnośląskie"),
c("Nysa", "Opolskie"),
c("Opoczno", "Łódzkie"),
c("Horyniec-Zdrój", "Lubelskie"),
c("Pionki", "Mazowieckie"),
c("Gołańcz", "Wielkopolskie"),
c("Władysławowo", "Pomorskie"),
c("Małkinia", "Mazowieckie"),
c("Wałbrzych Główny", "Dolnośląskie"),
c("Gdańsk Rębiechowo", "Pomorskie"),
c("Pierściec", "Śląskie"),
c("Kalisz Pomorski", "Zachodniopomorskie"),
c("Piechowice", "Dolnośląskie"),
c("Łódź Olechów Łoc", "Łódzkie"),
c("Piasecznica", "Mazowieckie"),
c("Świebodzin", "Lubuskie"),
c("Malczyce", "Dolnośląskie"),
c("Czempiń", "Wielkopolskie"),
c("Łódź Chojny", "Łódzkie"),
c("Warszawa Falenica", "Mazowieckie"),
c("Forst Lausitz", "Niemcy"),
c("Czechowice-Dziedzice", "Śląskie"),
c("Grzmiąca", "Zachodniopomorskie"),
c("Mezimesti", "Czechy"),
c("Jagodin", "Serbia"),
c("Bierutów", "Dolnośląskie"),
c("Sucha Beskidzka", "Małopolskie"),
c("Tychowo", "Zachodniopomorskie"),
c("Białogard", "Zachodniopomorskie"),
c("Nowy Sącz", "Małopolskie"),
c("Wrocław Stadion", "Dolnośląskie"),
c("Gdańsk Osowa", "Pomorskie"),
c("Dorohusk", "Lubelskie"),
c("Opole Wschodnie", "Opolskie"),
c("Czersk", "Pomorskie"),
c("Gągławki", "Pomorskie"),
c("Warszawa Gocławek", "Mazowieckie"),
c("Cieszyn", "Śląskie"),
c("Bednary", "Wielkopolskie"),
c("Bystrzyca Kłodzka Przedmieście", "Dolnośląskie"),
c("Raszówka", "Dolnośląskie"),
c("Zator", "Małopolskie"),
c("Warszawa Wawer", "Mazowieckie"),
c("Prostynia", "Warmińsko-Mazurskie"),
c("Małdyty", "Warmińsko-Mazurskie"),
c("Jeleśnia", "Małopolskie")
)
wojew = do.call(rbind, lapply(stations, function(x) data.frame(start = x[[1]], region = x[[2]])))
dfwoj = merge(x = df, y = wojew, by = "start")
rm(wojew)
leaderinwoj = dfwoj %>%
group_by(region, carrier)%>%
summarise(avg = mean(delay)) %>%
slice(which.max(avg))
bigbywoj = dfwoj %>%
group_by(region) %>%
summarise(more_by_10 = 100*sum(delay>5)/n())
lublin_dir = dfwoj[df$end == "Lublin Główny",] %>%
group_by(region)%>%
summarise(delaysum = sum(delay))
library(rgeoboundaries)
poland_void = gb_adm1("Poland")
voiv = c("Podkarpackie", "Podlaskie", "Łódzkie", "Dolnośląskie", "Opolskie", "Świętokrzyskie",
"Mazowieckie", "Wielkopolskie", "Małopolskie", "Lubuskie", "Kujawsko-Pomorskie",
"Pomorskie", "Zachodniopomorskie", "Lubelskie", "Warmińsko-Mazurskie", "Śląskie")
poland_void$shapeName = voiv
bigbywoj_map = merge(poland_void, bigbywoj, by.x = "shapeName", by.y = "region")
bigbywoj_map %>%
ggplot(aes(fill=more_by_10)) +
geom_sf(show.legend = c(alpha=F), color = "white") +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
labs(fill="%") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
ggtitle("Odsetek opóźnień większych od 10 min")
leaderinwoj_map = merge(poland_void, leaderinwoj, by.x = "shapeName", by.y = "region")
leaderinwoj_map %>%
ggplot(aes(fill=carrier)) +
geom_sf(show.legend = c(alpha=F), color = "white") +
labs(fill="") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
ggtitle("Przewoźnik z największą średnią opóźnień")
lublin_dir_map = merge(poland_void, lublin_dir, by.x = "shapeName", by.y = "region")
lublin_dir_map %>%
ggplot(aes(fill=delaysum))+
geom_sf(show.legend = c(alpha=F), color = "black") +
labs(fill="min") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle("Skąd najwięcej spóźnień do Lublina")
View(df)
library(caret)
df$is_late = ifelse(df$delay>=5, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_late = ifelse(df$delay>=5, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.5, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
library(caret)
df$is_late = ifelse(df$delay>=5, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
ggplot(df)+
geom_point(aes(y = delay, x = rain), colour = "darkorange")+
xlab("Opady (mm)")+
ylab("Opóźnienie (min)")+
theme_minimal()
df$is_rain = ifelse(df$rain>0, TRUE, FALSE)
ggplot(df) +
geom_boxplot(aes(is_rain, log(delay), fill = is_rain)) +
theme_minimal() +
xlab("Opady")+
ylab("Opóźnienie [log (min)]")+
theme(
axis.title = element_text(face = "bold"),
legend.position = "none"
)
summary(model)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE, error = FALSE)
library(caret)
df$is_late = ifelse(df$delay>=5, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="polynomial", data=train)
library(caret)
df$is_late = ifelse(df$delay>=5, TRUE, FALSE)
sample = sample(c(TRUE, FALSE), nrow(df), replace = TRUE, prob=c(0.7,0.3))
train = df[sample, ]
test = df[!sample, ]
rm(sample)
model = glm(is_late ~ rain, family="binomial", data=train)
predicted = predict(model, test[, colnames(test)!="is_late"], type="response")
predicted_bool = ifelse(predicted>0.1, TRUE, FALSE)
confusionMatrix(factor(test$is_late, levels = c(TRUE, FALSE)), factor(predicted_bool, levels = c(TRUE, FALSE)))
summary(model)
