ggplot(avg_prices) +
geom_col(aes(x = avg, y = city_district, fill = ifelse(avg>totalavg, "yellow", "green"))) +
geom_vline(xintercept = totalavg, linetype = "dashed", color = "red") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
guides(fill = "none")
avg_floor = DF %>%
group_by(floor)%>%
summarise(avg = mean(price))
mean_floor = mean(avg_floor$avg)
ggplot(avg_floor)%>%
geom_bar(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))
ggplot(avg_floor) +
geom_bar(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))
avg_floor = DF %>%
group_by(floor)%>%
summarise(avg = mean(price))
ggplot(avg_floor) +
geom_bar(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))
ggplot(avg_floor) +
geom_col(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))
ggplot(avg_floor) +
geom_col(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
guides(fill = "none")
ggplot(avg_floor) +
geom_col(aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red")
options(scipen = 999)
ggplot(avg_prices, aes(x = avg, y = city_district, fill = ifelse(avg>totalavg, "yellow", "green"))) +
geom_bar(stat = "identity", color = "black")
geom_vline(xintercept = totalavg, linetype = "dashed", color = "red") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
guides(fill = "none")
options(scipen = 999)
ggplot(avg_prices, aes(x = avg, y = city_district, fill = ifelse(avg>totalavg, "yellow", "green"))) +
geom_bar(stat = "identity", color = "black") +
geom_vline(xintercept = totalavg, linetype = "dashed", color = "red") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
guides(fill = "none")
ggplot(avg_prices, aes(x = avg, y = city_district, fill = ifelse(avg>totalavg, "lightgreen", "lightblue"))) +
geom_bar(stat = "identity", color = "black") +
geom_vline(xintercept = totalavg, linetype = "dashed", color = "red") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.75)) +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
guides(fill = "none")
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black")
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red")
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red")
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Floor")
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Floor") +
ylab("Avg price")
ggplot(avg_floor, aes(x = floor, y= avg, fill = ifelse(avg>mean_floor, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Floor") +
ylab("Avg price") +
ggtitle("Average price on each floor")
avg_region = DF%>%
group_by(city_district)%>%
summarise(size = mean(area))
mean_region = mean(avg_region$price)
mean_region = mean(avg_region$size)
ggplot(avg_region, aes(x = floor, y= size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_region, aes(x = city_district, y= size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_floor, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
View(avg_region)
ggplot(avg_region, aes(x = city_district, y= size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size")
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(yintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(xintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
avg_region = DF%>%
group_by(city_district)%>%
summarise(size = mean(area)) %>%
mutate(city_district = fct_reorder(city_district, size))
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(xintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
avg_region = DF%>%
group_by(city_district)%>%
summarise(size = mean(area)) %>%
mutate(city_district = fct_reorder(city_district, -size))
ggplot(avg_region, aes(y = city_district, x = size, fill = ifelse(size>mean_region, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(xintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen")) +
xlab("Avg Size") +
ylab("City District")
knitr::opts_chunk$set(echo = TRUE)
url = "https://www.pracuj.pl/praca/lublin;wp"
avg_rooms = DF %>%
order_by(floor)%>%
summarise(avg = mean(rooms))
avg_rooms = DF %>%
order_by(floor)%>%
summarise(avg = mean(rooms))
avg_rooms = DF %>%
group_by(floor)%>%
summarise(avg = mean(rooms))
mean_rooms = mean(avg_rooms$avg)
ggplot(avg_rooms, aes(x = floor, y = avg, fill = ifelse(avg>mean_rooms, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_vline(xintercept = mean_region, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_rooms, aes(x = floor, y = avg, fill = ifelse(avg>mean_rooms, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(hintercept = mean_rooms, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
ggplot(avg_rooms, aes(x = floor, y = avg, fill = ifelse(avg>mean_rooms, "lightblue", "lightgreen")))+
geom_bar(stat = "identity", color = "black") +
guides(fill = "none")+
geom_hline(yintercept = mean_rooms, linetype = "dashed", color = "red") +
scale_fill_manual(values = c("lightblue", "lightgreen"))
page_pracuj = read_html(url)
url = "https://www.pracuj.pl/praca/lublin;wp"
page_pracuj = read_html(url)
url = "https://www.olx.pl/oferty/q-iphone/"
page_pracuj = read_html(url)
offers = page_pracuj %>%
html_nodes("a.css-z3gu2d") %>%
html_attr("href")
offers = page_pracuj %>%
html_nodes("a.css-z3gu2d") %>%
html_attr("href")
offers = paste0("https://olx.pl", offers)
head(offers)
offers = page_pracuj %>%
html_nodes("a.css-z3gu2d") %>%
html_attr("href")
offers = paste0("https://olx.pl", offers)
for (i in 1:length(offers)) {
}
t=read_xls("/home/gwegus/Downloads/32310.xls")
library(readxl)
t=read_xls("/home/gwegus/Downloads/32310.xls")
t=read_xls("/home/gwegus/Downloads/32310.xls")
View(t)
t=read_xls("/home/gwegus/Downloads/32310.xls")
View(t)
t=t[ , colSums(is.na(t))==0]
t=t[ , c(colSums(is.na(t))==0, -1)]
t=t[ , colSums(is.na(t))==0)]
write.csv(t, file="table1.csv")
write.csv(t, file="/home/gwegus/Downloads/table1.csv")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages(baRcodeR)
install.packages("baRcodeR")
library(baRcodeR)
df = matrix(c(80, 6972576871770
75, 6972576875617
df = matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE)
View(df)
df = matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2)
View(df)
custom_create_PDF(Labels = df[, 1])
pdf = custom_create_PDF(Labels = df[, 1])
df = data.frame(matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2))
View(df)
df$pic = sprintf(code_128_make(df$X2))
source("~/.active-rstudio-document", echo=TRUE)
View(df)
df$pic = sprintf(code_128_make(df$X2))
df$pic = code_128_make(df$X2)
df$pic = barcode(df$X2)
install.packages("barcode")
source("~/.active-rstudio-document", echo=TRUE)
df$pic = barcode(as.character(df$X2))
df = data.frame(matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2))
df$pic = barcode(as.character(df$X2))
View(df)
barcode(df$X2[1])
df = data.frame(matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2))
barcode(df$X2[1])
barcode(df$X2[1])
barcode(df$X2[1])
barcode(df$X2[1], xscale=0)
barcode(df$X2[1])
barcode(6972576871770)
barcode("6972576871770")
df = data.frame(matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2))
library(baRcodeR)
df = data.frame(matrix(c(80, 6972576871770,
75, 6972576875617,
45, 6992024032126,
40, 6972576877345,
35,6970610220065,
120, 6972862760863), byrow=TRUE, ncol=2))
custom_create_PDF(Labels = df$X2, name = tempfile())
custom_create_PDF(Labels = df$X2, name = tempfile())
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(chron)
library(corrplot)
df = read.csv("data.csv")
library(ggridges)
library(plotly)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = log(n()), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
bar_plot = ggplot(delay_summary, aes(x = carrier, y = count, fill = delay_factor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Train Delays by Carrier",
#x = "Carrier",
y = "Log(Percentage of delay type)",
fill = "Delay Factor"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(face = "bold"),
legend.position = "right"
)
interactive_plot = ggplotly(bar_plot)
interactive_plot = interactive_plot %>%
layout(
xaxis = list(tickangle = 45)
)
interactive_plot
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[sample, ]
test <- df[!sample, ]
model = glm(is_late ~ temperature + rain + humidity, data = train, family = binomial)
summary(model)
# Predict probabilities
predicted = predict(model, test, type="response")
model =glm(outcome ~ age + income, data = data, family = binomial)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
df = read_csv("delays.csv")
summary(df)
sum(is.na(df))
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$date = strptime(df$date, format = '%Y-%m-%d')
df$arrival = strptime(df$arrival, format = '%H:%M')
split_data = do.call(rbind, strsplit(df$connection, " - ")) #tworzymy tymczasową zmienną
df$start = split_data[,1]
df$end = split_data[,2]
rm(split_data)
df = df[, -5]
df$id = as.factor(df$id)
df$carrier = as.factor(df$carrier)
df$delay = as.numeric(gsub(" min", "", df$delay))
df$name = as.factor(df$name)
df$start = as.factor(df$start)
df$end = as.factor(df$end)
df = df %>%
group_by(date) %>%
arrange(delay)%>% #dodatkowo też sortujemy względem opóźnienia
slice(seq(1, n(), by = 10)) %>% #i wybieramy każdą dziesiątą obserwację
ungroup()
weather = read.csv("weather.csv")
head(weather)
colnames(weather) = c("time", "temperature", "humidity", "rain", "pressure", "wind_speed")
weather = weather[c(-1, -2), ]
sum(is.na(weather))
weather$time = strptime(weather$time, format = '%Y-%m-%d T %H:%M')
weather$temperature = as.numeric(weather$temperature)
weather$humidity = as.numeric(weather$humidity)
weather$rain = as.numeric(weather$rain)
weather$pressure = as.numeric(weather$pressure)
weather$wind = as.numeric(weather$wind)
df = fuzzyjoin::difference_left_join(
df, weather,
by = c("datetime" = "time"),
max_dist = as.difftime(30, units = "mins") #definiujemy maksymalnie dopuszczalną różnicę w czasie
)%>%
# group_by(datetime) %>%
# filter(abs(difftime(datetime, datetime, units = "secs")) == min(abs(difftime(datetime, datetime, units = "secs")))) %>%
# ungroup() %>%
select(-time)     #usuwamy powtarzającą się kolumnę
rm(weather)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
df$is_late = ifelse(df$delay >= 5, TRUE, FALSE)
write.csv(df, file = "data.csv")
knitr::opts_chunk$set(echo = TRUE)
is.na(df)
df = na.omit(df)
df = read_csv("delays.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
df = read_csv("delays.csv")
summary(df)
is.na(df)
df = na.omit(df)
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$date = strptime(df$date, format = '%Y-%m-%d')
df$arrival = strptime(df$arrival, format = '%H:%M')
split_data = do.call(rbind, strsplit(df$connection, " - ")) #tworzymy tymczasową zmienną
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(fuzzyjoin)
library(chron)
df = read_csv("delays.csv")
sum(is.na(df))
df = na.omit(df)
summary(df)
df$datetime = strptime(df$datetime, format = "%Y-%m-%d %H:%M")
df$date = strptime(df$date, format = '%Y-%m-%d')
df$arrival = strptime(df$arrival, format = '%H:%M')
split_data = do.call(rbind, strsplit(df$connection, " - ")) #tworzymy tymczasową zmienną
df$start = split_data[,1]
df$end = split_data[,2]
rm(split_data)
df = df[, -5]
df$id = as.factor(df$id)
df$carrier = as.factor(df$carrier)
df$delay = as.numeric(gsub(" min", "", df$delay))
df$name = as.factor(df$name)
df$start = as.factor(df$start)
df$end = as.factor(df$end)
df = df %>%
group_by(date) %>%
arrange(delay)%>% #dodatkowo też sortujemy względem opóźnienia
slice(seq(1, n(), by = 20)) %>% #i wybieramy każdą dwudziestą obserwację
ungroup()
weather = read.csv("weather.csv")
head(weather)
colnames(weather) = c("time", "temperature", "humidity", "rain", "pressure", "wind_speed")
weather = weather[c(-1, -2), ]
sum(is.na(weather))
weather$time = strptime(weather$time, format = '%Y-%m-%d T %H:%M')
weather$temperature = as.numeric(weather$temperature)
weather$humidity = as.numeric(weather$humidity)
weather$rain = as.numeric(weather$rain)
weather$pressure = as.numeric(weather$pressure)
weather$wind = as.numeric(weather$wind)
df = fuzzyjoin::difference_left_join(
df, weather,
by = c("datetime" = "time"),
max_dist = as.difftime(30, units = "mins") #definiujemy maksymalnie dopuszczalną różnicę w czasie
)%>%
# group_by(datetime) %>%
# filter(abs(difftime(datetime, datetime, units = "secs")) == min(abs(difftime(datetime, datetime, units = "secs")))) %>%
# ungroup() %>%
select(-time)     #usuwamy powtarzającą się kolumnę
rm(weather)
df$delay_factor = cut(df$delay,
breaks = c(-Inf, 0, 5, 30, 60, Inf),
labels = c("0 min", "1-5 min", "6-30 min", "31-60 min", "> 60 min"),
right = TRUE)
df$is_late = ifelse(df$delay >= 5, TRUE, FALSE)
write.csv(df, file = "data.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tidyverse)
library(chron)
library(corrplot)
df = read.csv("data.csv")
library(ggridges)
library(plotly)
delay_summary = df %>%
group_by(carrier, delay_factor) %>%
summarise(count = log(n()), .groups = 'drop')
total_counts = delay_summary %>%
group_by(carrier) %>%
summarise(total_count = sum(count), .groups = 'drop')
delay_summary = delay_summary %>%
left_join(total_counts, by = "carrier") %>%
mutate(count = 100*count / total_count)
bar_plot = ggplot(delay_summary, aes(x = carrier, y = count, fill = delay_factor)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Counts of Train Delays by Carrier",
#x = "Carrier",
y = "Log(Percentage of delay type)",
fill = "Delay Factor"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(face = "bold"),
legend.position = "right"
)
interactive_plot = ggplotly(bar_plot)
interactive_plot = interactive_plot %>%
layout(
xaxis = list(tickangle = 45)
)
interactive_plot
install.packages("quarto")
install.packages("quarto")
install.packages("quarto")
install.packages("quarto")
