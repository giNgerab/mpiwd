# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
ggplotly(p)
ed = df[df$Year == 2000, ]
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population))) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
ggplotly(p)
ed = df[df$Year == 2000, ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population))) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
ggplotly(p)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
df = readxl::read_excel("Pollution_Dataframe.xlsx")
df$Year = as.factor(df$Year)
df$Country = as.factor(df$Country)
df$Continent = as.factor(df$Continent)
df
df = na.omit(df)
colSums(is.na(df))
library(ggplot2)
df2000 = df[(df$Year==2000 & df$Continent == "Europe"), ]
ggplot(df2000, aes(x=Country, y=Population)) +
geom_bar(stat = "identity", fill="red") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggcorrplot)
corr = cor(select_if(df, is.numeric))
ggcorrplot(corr) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df[df$Year == 2000, ], aes(fill=Continent, y = Avg_Temp)) +
geom_boxplot()
df[df$Year == 2000 & df$Continent == "Asia" & df$Avg_Temp > 20, ]
library(vcd)
mosaic(~ Continent + Energy_type, data = df, shade = TRUE, rot_labels = c(0, 90, 0, 0))
library(plotly)
library(ggridges)
tempprec = df[df$Year == 2015, ]
p = ggplot(tempprec, aes(x = Avg_Temp, y = Annual_precipitation, z = Country, fill = Continent)) +
geom_point() +
theme_minimal()
ggplotly(p)
ed = df[df$Year == 2000, ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population))) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
ggplotly(p)
ed = df[df$Year == 2000, ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
ggplotly(p)
ed = df[df$Year == 2000, ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000, ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000, ] %>%
order_by(Continent)
ed = df[df$Year == 2000, ] %>%
arrange(. , Continent)
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000, ] %>%
arrange(Continent)
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000, ] %>%
reorder(Continent)
ed = df[df$Year == 2000, ] %>%
reorder(df$Continent)
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=Country, y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=reorder(Country, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder(Country, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Population, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Population, Continent, population), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Population, Continent, Population), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder2(Country, Population, Continent), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder3(Country, Population, Continent, population), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder3(Country, Population, Continent, Population), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
ed = df[df$Year == 2000 & order(df$Continent), ]
library(plotly)
library(ggridges)
library(ggplot2)
p =   ggplot(ed, aes(x=fct_reorder(fct_reorder2(Country, Population, Continent), Population), y=sqrt(Population), fill = Continent)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity") +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_radial(start = 0, inner.radius = 0.5)
p
View(df)
View(df)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
weather = read.csv("open-meteo-51.99N19.98E113m.csv")
df = read.csv("delays.csv")
View(df)
summary(df)
summary(df$carrier)
df[df$name == "Lublin Główny"]
df[df$name == "Lublin Główny", ]
summary(df$carrier)
summary(df)
unique(df$datetime)
df$Date <- as.Date(df$datetime)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
weather = read.csv("open-meteo-51.99N19.98E113m.csv")
df = read.csv("delays.csv")
df$Date <- as.Date(df$datetime)
df$Time <- format(df$datetime,"%H:%M:%S")
df
rm(list = ls())
library(dplyr)
library(tidyverse)
weather = read.csv("open-meteo-51.99N19.98E113m.csv")
df = read.csv("delays.csv")
df$date <- as.Date(df$date)
df$Time <- format(df$datetime,"%H:%M:%S")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(chron)
weather = read.csv("open-meteo-51.99N19.98E113m.csv")
df = read.csv("delays.csv")
summarise(df)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(chron)
weather = read.csv("open-meteo-51.99N19.98E113m.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(chron)
weather = read.csv("open-meteo-52.55N13.41E38m.csv")
df = read.csv("delays.csv")
summarise(df)
df$date = as.Date(df$date)
df$Time = times(format(as.POSIXct(df$datetime), format = "%H:%M:%S"))
